%YAML 1.2
---
name: HTML (Svelte)
scope: text.html.svelte
version: 2

extends: Packages/HTML/HTML.sublime-syntax

file_extensions:
  - svlt
  - svelte

variables:

  # script mimetypes
  babel_mime_type: (?:(?:text|application)/babel)
  coffeescript_mime_type: (?:(?:text|application)/coffeescript)
  livescript_mime_type: (?:(?:text|application)/livescript)
  typescript_mime_type: (?:(?:text|application)/typescript)

  # svelte
  svelte_attribute_name: '[[:alnum:]_-]+'
  svelte_component_name: '[[:upper:]][[:alnum:]_]*'
  svelte_tag_name: '[[:alpha:]][[:alnum:]_]*'

contexts:

###[ HTML OVERRIDES ]##########################################################

  main:
    - meta_prepend: true
    - meta_scope: meta.template.svelte

  cdata-content:
    - meta_prepend: true
    - include: svelte-interpolations

  strings-common-content:
    - meta_prepend: true
    - include: svelte-interpolations

  tag-other:
    - meta_prepend: true
    - include: svelte-blocks
    - include: svelte-components

  tag-attributes:
    - meta_prepend: true
    - include: svelte-string-attributes
    - include: svelte-storage-attributes
    - include: svelte-style-attributes
    - include: svelte-variable-attributes

  tag-generic-attribute-name:
    - meta_prepend: true
    - include: svelte-interpolations

  tag-attribute-value-content:
    - meta_prepend: true
    - include: svelte-interpolations

###[ HTML SCRIPT TAG ATTRIBUTES ]##############################################

  script-common:
    - meta_prepend: true
    - include: script-lang-attribute

  script-lang-attribute:
    - match: (?i:lang){{attribute_name_break}}
      scope: meta.attribute-with-value.html entity.other.attribute-name.html
      set: script-lang-attribute-assignment

  script-lang-attribute-assignment:
    - meta_content_scope: meta.tag.script.begin.html meta.attribute-with-value.html
    - match: =
      scope: punctuation.separator.key-value.html
      set: script-lang-attribute-value
    - match: (?=\S)
      set: script-typescript

  script-lang-attribute-value:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html meta.attribute-with-value.html
    - include: script-lang-decider

  script-lang-decider:
    - match: (?i)(?=babel{{unquoted_attribute_break}}|'babel'|"babel")
      set:
        - script-babel
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=coffeescript{{unquoted_attribute_break}}|'coffeescript'|"coffeescript")
      set:
        - script-coffeescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=livescript{{unquoted_attribute_break}}|'livescript'|"livescript")
      set:
        - script-livescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=(?:js|javascript){{unquoted_attribute_break}}|'(?:js|javascript)'|"(?:js|javascript)")
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=(?:ts|typescript){{unquoted_attribute_break}}|'(?:ts|typescript)'|"(?:ts|typescript)")
      set:
        - script-typescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - script-javascript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

  script-type-decider:
    - meta_prepend: true
    - match: (?i)(?={{babel_mime_type}}{{unquoted_attribute_break}}|'{{babel_mime_type}}'|"{{babel_mime_type}}")
      set:
        - script-babel
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?={{coffeescript_mime_type}}{{unquoted_attribute_break}}|'{{coffeescript_mime_type}}'|"{{coffeescript_mime_type}}")
      set:
        - script-coffeescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?={{livescript_mime_type}}{{unquoted_attribute_break}}|'{{livescript_mime_type}}'|"{{livescript_mime_type}}")
      set:
        - script-livescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?={{typescript_mime_type}}{{unquoted_attribute_break}}|'{{typescript_mime_type}}'|"{{typescript_mime_type}}")
      set:
        - script-typescript
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

  script-babel:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-babel-content
    - include: script-common

  script-babel-content:
    - meta_include_prototype: false
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: JavaScript (Babel).sublime-syntax
      embed_scope: source.js.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.js.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.js.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  script-coffeescript:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-coffeescript-content
    - include: script-common

  script-coffeescript-content:
    - meta_include_prototype: false
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.coffee
      embed_scope: source.coffee.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.coffee.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.coffee.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  script-livescript:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-livescript-content
    - include: script-common

  script-livescript-content:
    - meta_include_prototype: false
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.livescript
      embed_scope: source.livescript.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.livescript.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.livescript.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  script-typescript:
    - meta_include_prototype: false
    - meta_scope: meta.tag.script.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: script-typescript-content
    - include: script-common

  script-typescript-content:
    - meta_include_prototype: false
    - match: '{{script_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1  # make sure to match only once
      embed: scope:source.ts
      embed_scope: source.ts.embedded.html
      escape: '{{script_content_end}}'
      escape_captures:
        1: source.ts.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.ts.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

###[ HTML STYLE TAG ATTRIBUTES ]###############################################

  style-common:
    - meta_prepend: true
    - include: style-lang-attribute

  style-lang-attribute:
    - match: (?i:lang){{attribute_name_break}}
      scope: meta.attribute-with-value.html entity.other.attribute-name.html
      set: style-lang-attribute-assignment

  style-lang-attribute-assignment:
    - meta_content_scope: meta.tag.style.begin.html meta.attribute-with-value.html
    - match: =
      scope: punctuation.separator.key-value.html
      set: style-lang-attribute-value
    - match: (?=\S)
      set: style-css

  style-lang-attribute-value:
    - meta_include_prototype: false
    - meta_scope: meta.tag.style.begin.html meta.attribute-with-value.html
    - include: style-lang-decider

  style-lang-decider:
    - match: (?i)(?=(?:post)?css{{unquoted_attribute_break}}|'(?:post)?css'|"(?:post)?css")
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=less{{unquoted_attribute_break}}|'less'|"less")
      set:
        - style-less
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=sass{{unquoted_attribute_break}}|'sass'|"sass")
      set:
        - style-sass
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=scss{{unquoted_attribute_break}}|'scss'|"scss")
      set:
        - style-scss
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=stylus{{unquoted_attribute_break}}|'stylus'|"stylus")
      set:
        - style-stylus
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

  style-type-decider:
    - match: (?i)(?=text/less{{unquoted_attribute_break}}|'text/less'|"text/less")
      set:
        - style-less
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=text/sass{{unquoted_attribute_break}}|'text/sass'|"text/sass")
      set:
        - style-sass
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=text/scss{{unquoted_attribute_break}}|'text/scss'|"text/scss")
      set:
        - style-scss
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?i)(?=text/stylus{{unquoted_attribute_break}}|'text/stylus'|"text/stylus")
      set:
        - style-stylus
        - tag-generic-attribute-meta
        - tag-generic-attribute-value
    - match: (?=\S)
      set:
        - style-css
        - tag-generic-attribute-meta
        - tag-generic-attribute-value

  style-less:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-less-content
    - include: style-common

  style-less-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.less
      embed_scope: source.less.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.less.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.less.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-sass:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-sass-content
    - include: style-common

  style-sass-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.sass
      embed_scope: source.sass.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.sass.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.sass.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-scss:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-scss-content
    - include: style-common

  style-scss-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.scss
      embed_scope: source.scss.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.scss.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.scss.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

  style-stylus:
    - meta_scope: meta.tag.style.begin.html
    - match: '>'
      scope: punctuation.definition.tag.end.html
      set: style-stylus-content
    - include: style-common

  style-stylus-content:
    - match: '{{style_content_begin}}'
      captures:
        1: comment.block.html punctuation.definition.comment.begin.html
      pop: 1
      embed: scope:source.stylus
      embed_scope: source.stylus.embedded.html
      escape: '{{style_content_end}}'
      escape_captures:
        1: source.stylus.embedded.html
        2: comment.block.html punctuation.definition.comment.end.html
        3: source.stylus.embedded.html
        4: comment.block.html punctuation.definition.comment.end.html

###[ SVELTE COMPONENTS ]#######################################################

  svelte-components:
    - match: (</?)((?:{{svelte_component_name}}|{{svelte_tag_name}}([.:]){{svelte_tag_name}}){{tag_name_break}})
      captures:
        1: punctuation.definition.tag.begin.html
        2: entity.name.tag.component.svelte
        3: punctuation.separator.namespace.svelte
      push: svelte-component-body

  svelte-component-body:
    - meta_scope: meta.tag.component.html
    - include: tag-end-maybe-self-closing
    - include: tag-attributes

###[ SVELTE TAG ATTRIBUTES ]###################################################

  svelte-string-attributes:
    - match: ((?i:on|bind|class|style))(:)({{svelte_attribute_name}})
      captures:
        1: support.function.svelte
        2: punctuation.separator.svelte
        3: string.unquoted.svelte
      push:
        - tag-generic-attribute-meta
        - tag-generic-attribute-assignment
        - svelte-attribute-modifiers

  svelte-storage-attributes:
    - match: ((?i:let))(:)({{svelte_attribute_name}})
      captures:
        1: keyword.declaration.variable.svelte
        2: punctuation.separator.svelte
        3: variable.other.readwrite.svelte
      push:
        - tag-generic-attribute-meta
        - tag-generic-attribute-assignment

  svelte-style-attributes:
    - match: (?=--[[:alpha:]])
      push:
        - tag-style-attribute-meta
        - svelte-style-attribute-assignment
        - svelte-style-attribute-name

  svelte-style-attribute-name:
    - meta_scope: entity.other.custom-property.css
    - include: tag-generic-attribute-name

  svelte-style-attribute-assignment:
    - meta_include_prototype: false
    - match: =
      scope: punctuation.separator.key-value.html
      set: svelte-style-attribute-value
    - include: else-pop

  svelte-style-attribute-value:
    - match: \"
      scope: meta.string.html string.quoted.double.html punctuation.definition.string.begin.html
      embed: scope:source.css#property-value-content
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \"
      escape_captures:
        0: meta.attribute-with-value.style.html meta.string.html string.quoted.double.html punctuation.definition.string.end.html
      pop: 1
    - match: \'
      scope: meta.string.html string.quoted.single.html punctuation.definition.string.begin.html
      embed: scope:source.css#property-value-content
      embed_scope: meta.string.html meta.interpolation.html source.css.embedded.html
      escape: \'
      escape_captures:
        0: meta.attribute-with-value.style.html meta.string.html string.quoted.single.html punctuation.definition.string.end.html
      pop: 1
    - include: else-pop

  svelte-variable-attributes:
    - match: ((?i:in|out|transition|animate|use))(:)({{svelte_attribute_name}})
      captures:
        1: support.function.svelte
        2: punctuation.separator.svelte
        3: variable.other.readwrite.svelte
      push:
        - tag-generic-attribute-meta
        - tag-generic-attribute-assignment
        - svelte-attribute-modifiers

  svelte-attribute-modifiers:
    - meta_scope: entity.other.attribute-name.svelte
    - match: (\|)({{svelte_attribute_name}})?
      captures:
        1: punctuation.separator.svelte
        2: support.constant.svelte
    - include: immediately-pop

###[ SVELTE STATEMENTS ]#######################################################

  svelte-blocks:
    - match: \{
      scope: punctuation.section.embedded.begin.svelte
      push:
        - svelte-embedded-body
        - svelte-embedded-begin

  svelte-embedded-begin:
    - meta_include_prototype: false
    - match: \@(?:html|debug|const)\b
      scope: support.function.svelte
      pop: 1
    # conditionals
    - match: (?:#if|/if|:else(?:\s+if)?)\b
      scope: keyword.control.conditional.svelte
      pop: 1
    # loops
    - match: \#(?:each|snippet)\b
      scope: keyword.control.loop.svelte
      set:
        - svelte-loop-index
        - svelte-loop-as
        - scope:source.js.embedded.svelte#expression
    - match: /(?:each|snippet)\b
      scope: keyword.control.loop.end.svelte
      pop: 1
    # await
    - match: \#await\b
      scope: keyword.control.await.svelte
      set:
        - svelte-await-keyword
        - scope:source.js.embedded.svelte#expression
    - match: (?:/await|:then|:catch)\b
      scope: keyword.control.await.svelte
      pop: 1
    # key
    - match: '[#/]key\b'
      scope: keyword.other.svelte
      pop: 1
    - include: else-pop

  svelte-await-keyword:
    - meta_include_prototype: false
    - match: (?i:then|catch)\b
      scope: keyword.control.await.svelte
      set: svelte-loop-variable
    - include: else-pop

  svelte-loop-as:
    - meta_include_prototype: false
    - match: (?i:as)\b
      scope: keyword.operator.assignment.as.svelte
      set: svelte-loop-variable
    - include: else-pop

  svelte-loop-index:
    - meta_include_prototype: false
    - match: ','
      scope: punctuation.separator.comma.svelte
      set: svelte-loop-variable
    - include: else-pop

  svelte-loop-variable:
    - meta_include_prototype: false
    - match: (?=\{)
      set: scope:source.js.embedded.svelte#expression-no-comma
    - match: \b[_$\p{L}\p{Nl}][_$\p{L}\p{Nl}\p{Mn}\p{Mc}\p{Nd}\p{Pc}\x{200C}\x{200D}]*\b
      scope: variable.other.readwrite.js
      pop: 1
    - include: else-pop

  svelte-embedded-body:
    - meta_scope: meta.embedded.block.svelte
    - meta_content_scope: source.js.embedded.svelte
    - match: \}
      scope: punctuation.section.embedded.end.svelte
      pop: 1
    - include: scope:source.js.embedded.svelte#expressions

###[ SVELTE INTERPOLATIONS ]###################################################

  svelte-interpolations:
    - match: \{
      scope: punctuation.section.embedded.begin.svelte
      push: svelte-interpolation-body

  svelte-interpolation-body:
    - clear_scopes: 1 # clear string scope
    - meta_scope: meta.embedded.block.svelte
    - meta_content_scope: source.js.embedded.svelte
    - include: svelte-embedded-body
